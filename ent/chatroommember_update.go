// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chatSystem/ent/chatroom"
	"chatSystem/ent/chatroommember"
	"chatSystem/ent/predicate"
	"chatSystem/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatRoomMemberUpdate is the builder for updating ChatRoomMember entities.
type ChatRoomMemberUpdate struct {
	config
	hooks    []Hook
	mutation *ChatRoomMemberMutation
}

// Where appends a list predicates to the ChatRoomMemberUpdate builder.
func (crmu *ChatRoomMemberUpdate) Where(ps ...predicate.ChatRoomMember) *ChatRoomMemberUpdate {
	crmu.mutation.Where(ps...)
	return crmu
}

// SetJoinedAt sets the "joined_at" field.
func (crmu *ChatRoomMemberUpdate) SetJoinedAt(t time.Time) *ChatRoomMemberUpdate {
	crmu.mutation.SetJoinedAt(t)
	return crmu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (crmu *ChatRoomMemberUpdate) SetNillableJoinedAt(t *time.Time) *ChatRoomMemberUpdate {
	if t != nil {
		crmu.SetJoinedAt(*t)
	}
	return crmu
}

// SetUserID sets the "user_id" field.
func (crmu *ChatRoomMemberUpdate) SetUserID(i int) *ChatRoomMemberUpdate {
	crmu.mutation.SetUserID(i)
	return crmu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (crmu *ChatRoomMemberUpdate) SetNillableUserID(i *int) *ChatRoomMemberUpdate {
	if i != nil {
		crmu.SetUserID(*i)
	}
	return crmu
}

// SetRoomID sets the "room_id" field.
func (crmu *ChatRoomMemberUpdate) SetRoomID(i int) *ChatRoomMemberUpdate {
	crmu.mutation.SetRoomID(i)
	return crmu
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (crmu *ChatRoomMemberUpdate) SetNillableRoomID(i *int) *ChatRoomMemberUpdate {
	if i != nil {
		crmu.SetRoomID(*i)
	}
	return crmu
}

// SetUser sets the "user" edge to the User entity.
func (crmu *ChatRoomMemberUpdate) SetUser(u *User) *ChatRoomMemberUpdate {
	return crmu.SetUserID(u.ID)
}

// SetRoom sets the "room" edge to the ChatRoom entity.
func (crmu *ChatRoomMemberUpdate) SetRoom(c *ChatRoom) *ChatRoomMemberUpdate {
	return crmu.SetRoomID(c.ID)
}

// Mutation returns the ChatRoomMemberMutation object of the builder.
func (crmu *ChatRoomMemberUpdate) Mutation() *ChatRoomMemberMutation {
	return crmu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (crmu *ChatRoomMemberUpdate) ClearUser() *ChatRoomMemberUpdate {
	crmu.mutation.ClearUser()
	return crmu
}

// ClearRoom clears the "room" edge to the ChatRoom entity.
func (crmu *ChatRoomMemberUpdate) ClearRoom() *ChatRoomMemberUpdate {
	crmu.mutation.ClearRoom()
	return crmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (crmu *ChatRoomMemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, crmu.sqlSave, crmu.mutation, crmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crmu *ChatRoomMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := crmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (crmu *ChatRoomMemberUpdate) Exec(ctx context.Context) error {
	_, err := crmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crmu *ChatRoomMemberUpdate) ExecX(ctx context.Context) {
	if err := crmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crmu *ChatRoomMemberUpdate) check() error {
	if crmu.mutation.UserCleared() && len(crmu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatRoomMember.user"`)
	}
	if crmu.mutation.RoomCleared() && len(crmu.mutation.RoomIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatRoomMember.room"`)
	}
	return nil
}

func (crmu *ChatRoomMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := crmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatroommember.Table, chatroommember.Columns, sqlgraph.NewFieldSpec(chatroommember.FieldID, field.TypeInt))
	if ps := crmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crmu.mutation.JoinedAt(); ok {
		_spec.SetField(chatroommember.FieldJoinedAt, field.TypeTime, value)
	}
	if crmu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatroommember.UserTable,
			Columns: []string{chatroommember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crmu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatroommember.UserTable,
			Columns: []string{chatroommember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crmu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatroommember.RoomTable,
			Columns: []string{chatroommember.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crmu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatroommember.RoomTable,
			Columns: []string{chatroommember.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, crmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroommember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	crmu.mutation.done = true
	return n, nil
}

// ChatRoomMemberUpdateOne is the builder for updating a single ChatRoomMember entity.
type ChatRoomMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatRoomMemberMutation
}

// SetJoinedAt sets the "joined_at" field.
func (crmuo *ChatRoomMemberUpdateOne) SetJoinedAt(t time.Time) *ChatRoomMemberUpdateOne {
	crmuo.mutation.SetJoinedAt(t)
	return crmuo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (crmuo *ChatRoomMemberUpdateOne) SetNillableJoinedAt(t *time.Time) *ChatRoomMemberUpdateOne {
	if t != nil {
		crmuo.SetJoinedAt(*t)
	}
	return crmuo
}

// SetUserID sets the "user_id" field.
func (crmuo *ChatRoomMemberUpdateOne) SetUserID(i int) *ChatRoomMemberUpdateOne {
	crmuo.mutation.SetUserID(i)
	return crmuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (crmuo *ChatRoomMemberUpdateOne) SetNillableUserID(i *int) *ChatRoomMemberUpdateOne {
	if i != nil {
		crmuo.SetUserID(*i)
	}
	return crmuo
}

// SetRoomID sets the "room_id" field.
func (crmuo *ChatRoomMemberUpdateOne) SetRoomID(i int) *ChatRoomMemberUpdateOne {
	crmuo.mutation.SetRoomID(i)
	return crmuo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (crmuo *ChatRoomMemberUpdateOne) SetNillableRoomID(i *int) *ChatRoomMemberUpdateOne {
	if i != nil {
		crmuo.SetRoomID(*i)
	}
	return crmuo
}

// SetUser sets the "user" edge to the User entity.
func (crmuo *ChatRoomMemberUpdateOne) SetUser(u *User) *ChatRoomMemberUpdateOne {
	return crmuo.SetUserID(u.ID)
}

// SetRoom sets the "room" edge to the ChatRoom entity.
func (crmuo *ChatRoomMemberUpdateOne) SetRoom(c *ChatRoom) *ChatRoomMemberUpdateOne {
	return crmuo.SetRoomID(c.ID)
}

// Mutation returns the ChatRoomMemberMutation object of the builder.
func (crmuo *ChatRoomMemberUpdateOne) Mutation() *ChatRoomMemberMutation {
	return crmuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (crmuo *ChatRoomMemberUpdateOne) ClearUser() *ChatRoomMemberUpdateOne {
	crmuo.mutation.ClearUser()
	return crmuo
}

// ClearRoom clears the "room" edge to the ChatRoom entity.
func (crmuo *ChatRoomMemberUpdateOne) ClearRoom() *ChatRoomMemberUpdateOne {
	crmuo.mutation.ClearRoom()
	return crmuo
}

// Where appends a list predicates to the ChatRoomMemberUpdate builder.
func (crmuo *ChatRoomMemberUpdateOne) Where(ps ...predicate.ChatRoomMember) *ChatRoomMemberUpdateOne {
	crmuo.mutation.Where(ps...)
	return crmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (crmuo *ChatRoomMemberUpdateOne) Select(field string, fields ...string) *ChatRoomMemberUpdateOne {
	crmuo.fields = append([]string{field}, fields...)
	return crmuo
}

// Save executes the query and returns the updated ChatRoomMember entity.
func (crmuo *ChatRoomMemberUpdateOne) Save(ctx context.Context) (*ChatRoomMember, error) {
	return withHooks(ctx, crmuo.sqlSave, crmuo.mutation, crmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crmuo *ChatRoomMemberUpdateOne) SaveX(ctx context.Context) *ChatRoomMember {
	node, err := crmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (crmuo *ChatRoomMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := crmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crmuo *ChatRoomMemberUpdateOne) ExecX(ctx context.Context) {
	if err := crmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crmuo *ChatRoomMemberUpdateOne) check() error {
	if crmuo.mutation.UserCleared() && len(crmuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatRoomMember.user"`)
	}
	if crmuo.mutation.RoomCleared() && len(crmuo.mutation.RoomIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatRoomMember.room"`)
	}
	return nil
}

func (crmuo *ChatRoomMemberUpdateOne) sqlSave(ctx context.Context) (_node *ChatRoomMember, err error) {
	if err := crmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatroommember.Table, chatroommember.Columns, sqlgraph.NewFieldSpec(chatroommember.FieldID, field.TypeInt))
	id, ok := crmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatRoomMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := crmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatroommember.FieldID)
		for _, f := range fields {
			if !chatroommember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatroommember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := crmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crmuo.mutation.JoinedAt(); ok {
		_spec.SetField(chatroommember.FieldJoinedAt, field.TypeTime, value)
	}
	if crmuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatroommember.UserTable,
			Columns: []string{chatroommember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crmuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatroommember.UserTable,
			Columns: []string{chatroommember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crmuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatroommember.RoomTable,
			Columns: []string{chatroommember.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crmuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatroommember.RoomTable,
			Columns: []string{chatroommember.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatRoomMember{config: crmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, crmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroommember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	crmuo.mutation.done = true
	return _node, nil
}
