// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chatSystem/ent/chatroom"
	"chatSystem/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChatRoom is the model entity for the ChatRoom schema.
type ChatRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatRoomQuery when eager-loading is set.
	Edges           ChatRoomEdges `json:"edges"`
	user_chat_rooms *int
	selectValues    sql.SelectValues
}

// ChatRoomEdges holds the relations/edges for other nodes in the graph.
type ChatRoomEdges struct {
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// Participants holds the value of the participants edge.
	Participants []*User `json:"participants,omitempty"`
	// Memberships holds the value of the memberships edge.
	Memberships []*ChatRoomMember `json:"memberships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatRoomEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e ChatRoomEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e ChatRoomEdges) ParticipantsOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e ChatRoomEdges) MembershipsOrErr() ([]*ChatRoomMember, error) {
	if e.loadedTypes[3] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatRoom) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatroom.FieldID:
			values[i] = new(sql.NullInt64)
		case chatroom.FieldName:
			values[i] = new(sql.NullString)
		case chatroom.ForeignKeys[0]: // user_chat_rooms
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatRoom fields.
func (cr *ChatRoom) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatroom.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case chatroom.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cr.Name = value.String
			}
		case chatroom.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_chat_rooms", value)
			} else if value.Valid {
				cr.user_chat_rooms = new(int)
				*cr.user_chat_rooms = int(value.Int64)
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatRoom.
// This includes values selected through modifiers, order, etc.
func (cr *ChatRoom) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the ChatRoom entity.
func (cr *ChatRoom) QueryCreator() *UserQuery {
	return NewChatRoomClient(cr.config).QueryCreator(cr)
}

// QueryMessages queries the "messages" edge of the ChatRoom entity.
func (cr *ChatRoom) QueryMessages() *MessageQuery {
	return NewChatRoomClient(cr.config).QueryMessages(cr)
}

// QueryParticipants queries the "participants" edge of the ChatRoom entity.
func (cr *ChatRoom) QueryParticipants() *UserQuery {
	return NewChatRoomClient(cr.config).QueryParticipants(cr)
}

// QueryMemberships queries the "memberships" edge of the ChatRoom entity.
func (cr *ChatRoom) QueryMemberships() *ChatRoomMemberQuery {
	return NewChatRoomClient(cr.config).QueryMemberships(cr)
}

// Update returns a builder for updating this ChatRoom.
// Note that you need to call ChatRoom.Unwrap() before calling this method if this ChatRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ChatRoom) Update() *ChatRoomUpdateOne {
	return NewChatRoomClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the ChatRoom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ChatRoom) Unwrap() *ChatRoom {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatRoom is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ChatRoom) String() string {
	var builder strings.Builder
	builder.WriteString("ChatRoom(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("name=")
	builder.WriteString(cr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ChatRooms is a parsable slice of ChatRoom.
type ChatRooms []*ChatRoom
