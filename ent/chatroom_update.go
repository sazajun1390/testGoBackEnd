// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chatSystem/ent/chatroom"
	"chatSystem/ent/chatroommember"
	"chatSystem/ent/message"
	"chatSystem/ent/predicate"
	"chatSystem/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatRoomUpdate is the builder for updating ChatRoom entities.
type ChatRoomUpdate struct {
	config
	hooks    []Hook
	mutation *ChatRoomMutation
}

// Where appends a list predicates to the ChatRoomUpdate builder.
func (cru *ChatRoomUpdate) Where(ps ...predicate.ChatRoom) *ChatRoomUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetName sets the "name" field.
func (cru *ChatRoomUpdate) SetName(s string) *ChatRoomUpdate {
	cru.mutation.SetName(s)
	return cru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cru *ChatRoomUpdate) SetNillableName(s *string) *ChatRoomUpdate {
	if s != nil {
		cru.SetName(*s)
	}
	return cru
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (cru *ChatRoomUpdate) SetCreatorID(id int) *ChatRoomUpdate {
	cru.mutation.SetCreatorID(id)
	return cru
}

// SetCreator sets the "creator" edge to the User entity.
func (cru *ChatRoomUpdate) SetCreator(u *User) *ChatRoomUpdate {
	return cru.SetCreatorID(u.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (cru *ChatRoomUpdate) AddMessageIDs(ids ...int) *ChatRoomUpdate {
	cru.mutation.AddMessageIDs(ids...)
	return cru
}

// AddMessages adds the "messages" edges to the Message entity.
func (cru *ChatRoomUpdate) AddMessages(m ...*Message) *ChatRoomUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cru.AddMessageIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (cru *ChatRoomUpdate) AddParticipantIDs(ids ...int) *ChatRoomUpdate {
	cru.mutation.AddParticipantIDs(ids...)
	return cru
}

// AddParticipants adds the "participants" edges to the User entity.
func (cru *ChatRoomUpdate) AddParticipants(u ...*User) *ChatRoomUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cru.AddParticipantIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the ChatRoomMember entity by IDs.
func (cru *ChatRoomUpdate) AddMembershipIDs(ids ...int) *ChatRoomUpdate {
	cru.mutation.AddMembershipIDs(ids...)
	return cru
}

// AddMemberships adds the "memberships" edges to the ChatRoomMember entity.
func (cru *ChatRoomUpdate) AddMemberships(c ...*ChatRoomMember) *ChatRoomUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cru.AddMembershipIDs(ids...)
}

// Mutation returns the ChatRoomMutation object of the builder.
func (cru *ChatRoomUpdate) Mutation() *ChatRoomMutation {
	return cru.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (cru *ChatRoomUpdate) ClearCreator() *ChatRoomUpdate {
	cru.mutation.ClearCreator()
	return cru
}

// ClearMessages clears all "messages" edges to the Message entity.
func (cru *ChatRoomUpdate) ClearMessages() *ChatRoomUpdate {
	cru.mutation.ClearMessages()
	return cru
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (cru *ChatRoomUpdate) RemoveMessageIDs(ids ...int) *ChatRoomUpdate {
	cru.mutation.RemoveMessageIDs(ids...)
	return cru
}

// RemoveMessages removes "messages" edges to Message entities.
func (cru *ChatRoomUpdate) RemoveMessages(m ...*Message) *ChatRoomUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cru.RemoveMessageIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the User entity.
func (cru *ChatRoomUpdate) ClearParticipants() *ChatRoomUpdate {
	cru.mutation.ClearParticipants()
	return cru
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (cru *ChatRoomUpdate) RemoveParticipantIDs(ids ...int) *ChatRoomUpdate {
	cru.mutation.RemoveParticipantIDs(ids...)
	return cru
}

// RemoveParticipants removes "participants" edges to User entities.
func (cru *ChatRoomUpdate) RemoveParticipants(u ...*User) *ChatRoomUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cru.RemoveParticipantIDs(ids...)
}

// ClearMemberships clears all "memberships" edges to the ChatRoomMember entity.
func (cru *ChatRoomUpdate) ClearMemberships() *ChatRoomUpdate {
	cru.mutation.ClearMemberships()
	return cru
}

// RemoveMembershipIDs removes the "memberships" edge to ChatRoomMember entities by IDs.
func (cru *ChatRoomUpdate) RemoveMembershipIDs(ids ...int) *ChatRoomUpdate {
	cru.mutation.RemoveMembershipIDs(ids...)
	return cru
}

// RemoveMemberships removes "memberships" edges to ChatRoomMember entities.
func (cru *ChatRoomUpdate) RemoveMemberships(c ...*ChatRoomMember) *ChatRoomUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cru.RemoveMembershipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *ChatRoomUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ChatRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ChatRoomUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ChatRoomUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *ChatRoomUpdate) check() error {
	if v, ok := cru.mutation.Name(); ok {
		if err := chatroom.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ChatRoom.name": %w`, err)}
		}
	}
	if cru.mutation.CreatorCleared() && len(cru.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatRoom.creator"`)
	}
	return nil
}

func (cru *ChatRoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatroom.Table, chatroom.Columns, sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Name(); ok {
		_spec.SetField(chatroom.FieldName, field.TypeString, value)
	}
	if cru.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatroom.CreatorTable,
			Columns: []string{chatroom.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatroom.CreatorTable,
			Columns: []string{chatroom.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !cru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &ChatRoomMemberCreate{config: cru.config, mutation: newChatRoomMemberMutation(cru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cru.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ChatRoomMemberCreate{config: cru.config, mutation: newChatRoomMemberMutation(cru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ChatRoomMemberCreate{config: cru.config, mutation: newChatRoomMemberMutation(cru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chatroom.MembershipsTable,
			Columns: []string{chatroom.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroommember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !cru.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chatroom.MembershipsTable,
			Columns: []string{chatroom.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroommember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chatroom.MembershipsTable,
			Columns: []string{chatroom.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroommember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// ChatRoomUpdateOne is the builder for updating a single ChatRoom entity.
type ChatRoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatRoomMutation
}

// SetName sets the "name" field.
func (cruo *ChatRoomUpdateOne) SetName(s string) *ChatRoomUpdateOne {
	cruo.mutation.SetName(s)
	return cruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cruo *ChatRoomUpdateOne) SetNillableName(s *string) *ChatRoomUpdateOne {
	if s != nil {
		cruo.SetName(*s)
	}
	return cruo
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (cruo *ChatRoomUpdateOne) SetCreatorID(id int) *ChatRoomUpdateOne {
	cruo.mutation.SetCreatorID(id)
	return cruo
}

// SetCreator sets the "creator" edge to the User entity.
func (cruo *ChatRoomUpdateOne) SetCreator(u *User) *ChatRoomUpdateOne {
	return cruo.SetCreatorID(u.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (cruo *ChatRoomUpdateOne) AddMessageIDs(ids ...int) *ChatRoomUpdateOne {
	cruo.mutation.AddMessageIDs(ids...)
	return cruo
}

// AddMessages adds the "messages" edges to the Message entity.
func (cruo *ChatRoomUpdateOne) AddMessages(m ...*Message) *ChatRoomUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cruo.AddMessageIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (cruo *ChatRoomUpdateOne) AddParticipantIDs(ids ...int) *ChatRoomUpdateOne {
	cruo.mutation.AddParticipantIDs(ids...)
	return cruo
}

// AddParticipants adds the "participants" edges to the User entity.
func (cruo *ChatRoomUpdateOne) AddParticipants(u ...*User) *ChatRoomUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cruo.AddParticipantIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the ChatRoomMember entity by IDs.
func (cruo *ChatRoomUpdateOne) AddMembershipIDs(ids ...int) *ChatRoomUpdateOne {
	cruo.mutation.AddMembershipIDs(ids...)
	return cruo
}

// AddMemberships adds the "memberships" edges to the ChatRoomMember entity.
func (cruo *ChatRoomUpdateOne) AddMemberships(c ...*ChatRoomMember) *ChatRoomUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cruo.AddMembershipIDs(ids...)
}

// Mutation returns the ChatRoomMutation object of the builder.
func (cruo *ChatRoomUpdateOne) Mutation() *ChatRoomMutation {
	return cruo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (cruo *ChatRoomUpdateOne) ClearCreator() *ChatRoomUpdateOne {
	cruo.mutation.ClearCreator()
	return cruo
}

// ClearMessages clears all "messages" edges to the Message entity.
func (cruo *ChatRoomUpdateOne) ClearMessages() *ChatRoomUpdateOne {
	cruo.mutation.ClearMessages()
	return cruo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (cruo *ChatRoomUpdateOne) RemoveMessageIDs(ids ...int) *ChatRoomUpdateOne {
	cruo.mutation.RemoveMessageIDs(ids...)
	return cruo
}

// RemoveMessages removes "messages" edges to Message entities.
func (cruo *ChatRoomUpdateOne) RemoveMessages(m ...*Message) *ChatRoomUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cruo.RemoveMessageIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the User entity.
func (cruo *ChatRoomUpdateOne) ClearParticipants() *ChatRoomUpdateOne {
	cruo.mutation.ClearParticipants()
	return cruo
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (cruo *ChatRoomUpdateOne) RemoveParticipantIDs(ids ...int) *ChatRoomUpdateOne {
	cruo.mutation.RemoveParticipantIDs(ids...)
	return cruo
}

// RemoveParticipants removes "participants" edges to User entities.
func (cruo *ChatRoomUpdateOne) RemoveParticipants(u ...*User) *ChatRoomUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cruo.RemoveParticipantIDs(ids...)
}

// ClearMemberships clears all "memberships" edges to the ChatRoomMember entity.
func (cruo *ChatRoomUpdateOne) ClearMemberships() *ChatRoomUpdateOne {
	cruo.mutation.ClearMemberships()
	return cruo
}

// RemoveMembershipIDs removes the "memberships" edge to ChatRoomMember entities by IDs.
func (cruo *ChatRoomUpdateOne) RemoveMembershipIDs(ids ...int) *ChatRoomUpdateOne {
	cruo.mutation.RemoveMembershipIDs(ids...)
	return cruo
}

// RemoveMemberships removes "memberships" edges to ChatRoomMember entities.
func (cruo *ChatRoomUpdateOne) RemoveMemberships(c ...*ChatRoomMember) *ChatRoomUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cruo.RemoveMembershipIDs(ids...)
}

// Where appends a list predicates to the ChatRoomUpdate builder.
func (cruo *ChatRoomUpdateOne) Where(ps ...predicate.ChatRoom) *ChatRoomUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *ChatRoomUpdateOne) Select(field string, fields ...string) *ChatRoomUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated ChatRoom entity.
func (cruo *ChatRoomUpdateOne) Save(ctx context.Context) (*ChatRoom, error) {
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ChatRoomUpdateOne) SaveX(ctx context.Context) *ChatRoom {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *ChatRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ChatRoomUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *ChatRoomUpdateOne) check() error {
	if v, ok := cruo.mutation.Name(); ok {
		if err := chatroom.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ChatRoom.name": %w`, err)}
		}
	}
	if cruo.mutation.CreatorCleared() && len(cruo.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatRoom.creator"`)
	}
	return nil
}

func (cruo *ChatRoomUpdateOne) sqlSave(ctx context.Context) (_node *ChatRoom, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatroom.Table, chatroom.Columns, sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatRoom.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatroom.FieldID)
		for _, f := range fields {
			if !chatroom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatroom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Name(); ok {
		_spec.SetField(chatroom.FieldName, field.TypeString, value)
	}
	if cruo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatroom.CreatorTable,
			Columns: []string{chatroom.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatroom.CreatorTable,
			Columns: []string{chatroom.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !cruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &ChatRoomMemberCreate{config: cruo.config, mutation: newChatRoomMemberMutation(cruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cruo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ChatRoomMemberCreate{config: cruo.config, mutation: newChatRoomMemberMutation(cruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ChatRoomMemberCreate{config: cruo.config, mutation: newChatRoomMemberMutation(cruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chatroom.MembershipsTable,
			Columns: []string{chatroom.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroommember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !cruo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chatroom.MembershipsTable,
			Columns: []string{chatroom.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroommember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chatroom.MembershipsTable,
			Columns: []string{chatroom.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroommember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatRoom{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
